/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DsBreadcrumb {
    }
    interface DsButton {
        /**
          * 是否可点击
         */
        "dsDanger": boolean;
        /**
          * 是否可点击
         */
        "dsDisabled": boolean;
        /**
          * 设置载入状态
         */
        "dsLoadding": boolean;
        /**
          * 根据类型显示按钮的样式
         */
        "dsType": 'default' | 'primary' | 'dashed' | 'link' | 'text';
    }
    interface DsCard {
        /**
          * 卡片操作组
         */
        "dsAction": any[];
    }
    interface DsDivider {
        /**
          * 是否虚线
         */
        "dsDashed": boolean;
        /**
          * 文本位置
         */
        "dsTextDirection": 'center' | 'left' | 'right';
        /**
          * 分割线的类型,水平还是垂直
         */
        "dsType": 'horizontal' | 'vertical';
    }
    interface DsDrag {
        "operate": string;
    }
    interface DsDrop {
    }
    interface DsFor {
        /**
          * 是否显示
         */
        "dsValue": any[];
    }
    interface DsIf {
        /**
          * 是否显示
         */
        "dsValue": boolean;
    }
    interface DsMenu {
    }
    interface DsPopover {
    }
    interface DsSpace {
        /**
          * 内部布局，垂直还是水平
         */
        "dsDirection": 'vertical' | 'horizontal';
        /**
          * 间距的大小，单位px
         */
        "dsSize": number;
    }
    interface DsSpaceItem {
        /**
          * 外部布局，垂直还是水平
         */
        "dsDirection": 'vertical' | 'horizontal';
        /**
          * 是否是最后一个子元素
         */
        "dsLast": boolean;
        /**
          * 间距的大小，单位px
         */
        "dsSize": number;
    }
    interface DsTypography {
        /**
          * 主元素显示的HTml
         */
        "dsTag": 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'p' | 'span';
        /**
          * 文本类型
         */
        "dsType": 'default' | 'secondary' | 'warning'
    | 'danger' | 'success' | 'disabled';
    }
}
declare global {
    interface HTMLDsBreadcrumbElement extends Components.DsBreadcrumb, HTMLStencilElement {
    }
    var HTMLDsBreadcrumbElement: {
        prototype: HTMLDsBreadcrumbElement;
        new (): HTMLDsBreadcrumbElement;
    };
    interface HTMLDsButtonElement extends Components.DsButton, HTMLStencilElement {
    }
    var HTMLDsButtonElement: {
        prototype: HTMLDsButtonElement;
        new (): HTMLDsButtonElement;
    };
    interface HTMLDsCardElement extends Components.DsCard, HTMLStencilElement {
    }
    var HTMLDsCardElement: {
        prototype: HTMLDsCardElement;
        new (): HTMLDsCardElement;
    };
    interface HTMLDsDividerElement extends Components.DsDivider, HTMLStencilElement {
    }
    var HTMLDsDividerElement: {
        prototype: HTMLDsDividerElement;
        new (): HTMLDsDividerElement;
    };
    interface HTMLDsDragElement extends Components.DsDrag, HTMLStencilElement {
    }
    var HTMLDsDragElement: {
        prototype: HTMLDsDragElement;
        new (): HTMLDsDragElement;
    };
    interface HTMLDsDropElement extends Components.DsDrop, HTMLStencilElement {
    }
    var HTMLDsDropElement: {
        prototype: HTMLDsDropElement;
        new (): HTMLDsDropElement;
    };
    interface HTMLDsForElement extends Components.DsFor, HTMLStencilElement {
    }
    var HTMLDsForElement: {
        prototype: HTMLDsForElement;
        new (): HTMLDsForElement;
    };
    interface HTMLDsIfElement extends Components.DsIf, HTMLStencilElement {
    }
    var HTMLDsIfElement: {
        prototype: HTMLDsIfElement;
        new (): HTMLDsIfElement;
    };
    interface HTMLDsMenuElement extends Components.DsMenu, HTMLStencilElement {
    }
    var HTMLDsMenuElement: {
        prototype: HTMLDsMenuElement;
        new (): HTMLDsMenuElement;
    };
    interface HTMLDsPopoverElement extends Components.DsPopover, HTMLStencilElement {
    }
    var HTMLDsPopoverElement: {
        prototype: HTMLDsPopoverElement;
        new (): HTMLDsPopoverElement;
    };
    interface HTMLDsSpaceElement extends Components.DsSpace, HTMLStencilElement {
    }
    var HTMLDsSpaceElement: {
        prototype: HTMLDsSpaceElement;
        new (): HTMLDsSpaceElement;
    };
    interface HTMLDsSpaceItemElement extends Components.DsSpaceItem, HTMLStencilElement {
    }
    var HTMLDsSpaceItemElement: {
        prototype: HTMLDsSpaceItemElement;
        new (): HTMLDsSpaceItemElement;
    };
    interface HTMLDsTypographyElement extends Components.DsTypography, HTMLStencilElement {
    }
    var HTMLDsTypographyElement: {
        prototype: HTMLDsTypographyElement;
        new (): HTMLDsTypographyElement;
    };
    interface HTMLElementTagNameMap {
        "ds-breadcrumb": HTMLDsBreadcrumbElement;
        "ds-button": HTMLDsButtonElement;
        "ds-card": HTMLDsCardElement;
        "ds-divider": HTMLDsDividerElement;
        "ds-drag": HTMLDsDragElement;
        "ds-drop": HTMLDsDropElement;
        "ds-for": HTMLDsForElement;
        "ds-if": HTMLDsIfElement;
        "ds-menu": HTMLDsMenuElement;
        "ds-popover": HTMLDsPopoverElement;
        "ds-space": HTMLDsSpaceElement;
        "ds-space-item": HTMLDsSpaceItemElement;
        "ds-typography": HTMLDsTypographyElement;
    }
}
declare namespace LocalJSX {
    interface DsBreadcrumb {
    }
    interface DsButton {
        /**
          * 是否可点击
         */
        "dsDanger"?: boolean;
        /**
          * 是否可点击
         */
        "dsDisabled"?: boolean;
        /**
          * 设置载入状态
         */
        "dsLoadding"?: boolean;
        /**
          * 根据类型显示按钮的样式
         */
        "dsType"?: 'default' | 'primary' | 'dashed' | 'link' | 'text';
    }
    interface DsCard {
        /**
          * 卡片操作组
         */
        "dsAction"?: any[];
    }
    interface DsDivider {
        /**
          * 是否虚线
         */
        "dsDashed"?: boolean;
        /**
          * 文本位置
         */
        "dsTextDirection"?: 'center' | 'left' | 'right';
        /**
          * 分割线的类型,水平还是垂直
         */
        "dsType"?: 'horizontal' | 'vertical';
    }
    interface DsDrag {
        "operate"?: string;
    }
    interface DsDrop {
    }
    interface DsFor {
        /**
          * 是否显示
         */
        "dsValue"?: any[];
    }
    interface DsIf {
        /**
          * 是否显示
         */
        "dsValue"?: boolean;
    }
    interface DsMenu {
    }
    interface DsPopover {
    }
    interface DsSpace {
        /**
          * 内部布局，垂直还是水平
         */
        "dsDirection"?: 'vertical' | 'horizontal';
        /**
          * 间距的大小，单位px
         */
        "dsSize"?: number;
    }
    interface DsSpaceItem {
        /**
          * 外部布局，垂直还是水平
         */
        "dsDirection"?: 'vertical' | 'horizontal';
        /**
          * 是否是最后一个子元素
         */
        "dsLast"?: boolean;
        /**
          * 间距的大小，单位px
         */
        "dsSize"?: number;
    }
    interface DsTypography {
        /**
          * 主元素显示的HTml
         */
        "dsTag"?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'p' | 'span';
        /**
          * 文本类型
         */
        "dsType"?: 'default' | 'secondary' | 'warning'
    | 'danger' | 'success' | 'disabled';
    }
    interface IntrinsicElements {
        "ds-breadcrumb": DsBreadcrumb;
        "ds-button": DsButton;
        "ds-card": DsCard;
        "ds-divider": DsDivider;
        "ds-drag": DsDrag;
        "ds-drop": DsDrop;
        "ds-for": DsFor;
        "ds-if": DsIf;
        "ds-menu": DsMenu;
        "ds-popover": DsPopover;
        "ds-space": DsSpace;
        "ds-space-item": DsSpaceItem;
        "ds-typography": DsTypography;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ds-breadcrumb": LocalJSX.DsBreadcrumb & JSXBase.HTMLAttributes<HTMLDsBreadcrumbElement>;
            "ds-button": LocalJSX.DsButton & JSXBase.HTMLAttributes<HTMLDsButtonElement>;
            "ds-card": LocalJSX.DsCard & JSXBase.HTMLAttributes<HTMLDsCardElement>;
            "ds-divider": LocalJSX.DsDivider & JSXBase.HTMLAttributes<HTMLDsDividerElement>;
            "ds-drag": LocalJSX.DsDrag & JSXBase.HTMLAttributes<HTMLDsDragElement>;
            "ds-drop": LocalJSX.DsDrop & JSXBase.HTMLAttributes<HTMLDsDropElement>;
            "ds-for": LocalJSX.DsFor & JSXBase.HTMLAttributes<HTMLDsForElement>;
            "ds-if": LocalJSX.DsIf & JSXBase.HTMLAttributes<HTMLDsIfElement>;
            "ds-menu": LocalJSX.DsMenu & JSXBase.HTMLAttributes<HTMLDsMenuElement>;
            "ds-popover": LocalJSX.DsPopover & JSXBase.HTMLAttributes<HTMLDsPopoverElement>;
            "ds-space": LocalJSX.DsSpace & JSXBase.HTMLAttributes<HTMLDsSpaceElement>;
            "ds-space-item": LocalJSX.DsSpaceItem & JSXBase.HTMLAttributes<HTMLDsSpaceItemElement>;
            "ds-typography": LocalJSX.DsTypography & JSXBase.HTMLAttributes<HTMLDsTypographyElement>;
        }
    }
}
